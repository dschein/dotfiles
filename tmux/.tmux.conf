set -g default-terminal screen
## determine if we should enable 256-colour support
if "[[ ${TERM} =~ 256color || ${TERM} == fbterm ]]" 'set -g default-terminal screen-256color'

unbind-key C-b
set -g prefix C-a
bind-key C-a send-prefix

# Allows you to use C-a a <command> to send commands to a TMUX session inside
# another TMUX session
bind-key a send-prefix

set -sg escape-time 1
set -g base-index 1
setw -g pane-base-index 1

set -g mouse on

setw -g monitor-activity on
set -g visual-activity on

set -g mode-keys vi

set-option -g status-keys vi
set-window-option -g utf8 on # utf8 support
set -g history-limit 10000

# y and p as in vim
bind-key Escape copy-mode
unbind-key p
bind-key p paste-buffer
bind-key -t vi-copy 'v' begin-selection
bind-key -t vi-copy 'y' copy-selection
bind-key -t vi-copy 'Space' halfpage-down
bind-key -t vi-copy 'Bspace' halfpage-up

# extra commands for interacting with the ICCCM clipboard
bind-key C-c run "tmux save-buffer - | xclip -i -sel clipboard"
bind-key C-v run "tmux set-buffer \"$(xclip -o -sel clipboard)\"; tmux paste-buffer"

# easy-to-remember split pane commands
unbind-key %
unbind-key '"'
bind-key \ split-window -h # horizontal split
bind-key = split-window -v # vertical split

# resize panes with vim movement keys
bind-key -r H resize-pane -L 5
bind-key -r J resize-pane -D 5
bind-key -r K resize-pane -U 5
bind-key -r L resize-pane -R 5
#
# pane movement
bind-key j command-prompt -p "join pane from:"  "join-pane -s '%%'"
bind-key s command-prompt -p "send pane to:"  "join-pane -t '%%'"

setw -g aggressive-resize on

# splitting and cycling
bind-key C-j previous-window
bind-key C-k next-window

# window title
set-option -g set-titles-string '#S:#I.#P #W' # window number,program name,active (or not)
set-option -g set-titles on
#set-window-option -g automatic-rename-format '#S:#I.#P #W'
#set-window-option -g automatic-rename on # auto name

#next tab
bind-key -n C-right next

#previous tab
bind-key -n C-left prev

# status bar
set-option -g status-utf8 on
set-option -g status-justify right
set-option -g status-interval 5
set-option -g status-left-length 60
set-option -g status-left '#[fg=magenta]» #[fg=green,bold]#T#[default]'
set-option -g status-right '#[fg=cyan]»» #[fg=blue,bold]###S #[fg=magenta]#(acpi | cut -d ',' -f 2)#[default]'
set-option -g visual-activity on
#set-option -g window-status-current-format '#I:#{pane_current_path}#F'
#set-option -g window-status-current-format '#I:#T#F'
#set-option -g window-status-format '#I:#{pane_current_path}#F'
set-option -g status-interval 1
set-window-option -g monitor-activity on
set-window-option -g window-status-current-fg white

# clock
set-window-option -g clock-mode-style 24
#
# present a menu of URLs to open from the visible pane. sweet.
bind-key u capture-pane \; save-buffer /tmp/tmux-buffer \; split-window -l 10 "urlview /tmp/tmux-buffer"

bind-key r source-file ~/.tmux.conf \; display-message "Config reloaded."

#### COLOR (Solarized 256)

# default statusbar colors
set-option -g status-bg colour235 #base02
set-option -g status-fg colour136 #yellow
set-option -g status-attr default

# default window title colors
set-window-option -g window-status-fg colour244 #base0
set-window-option -g window-status-bg default
#set-window-option -g window-status-attr dim

# active window title colors
set-window-option -g window-status-current-fg colour166 #orange
set-window-option -g window-status-current-bg default
#set-window-option -g window-status-current-attr bright

# pane border
set-option -g pane-border-fg blue
set-option -g pane-active-border-fg yellow

# message text
set-option -g message-bg colour235 #base02
set-option -g message-fg colour166 #orange

# pane number display
set-option -g display-panes-active-colour colour33 #blue
set-option -g display-panes-colour colour166 #orange

# clock
set-window-option -g clock-mode-colour colour64 #green

bind-key -n M-6 last-window
# Smart pane switching with awareness of vim splits
# See: https://github.com/christoomey/vim-tmux-navigator
is_vim='echo "#{pane_current_command}" | grep -iqE "(^|\/)g?(view|n?vim?)(diff)?$"'
bind-key -n M-h if-shell "$is_vim" "send-keys M-h" "select-pane -L"
bind-key -n M-j if-shell "$is_vim" "send-keys M-j" "select-pane -D"
bind-key -n M-k if-shell "$is_vim" "send-keys M-k" "select-pane -U"
bind-key -n M-l if-shell "$is_vim" "send-keys M-l" "select-pane -R"
bind-key -n M-\ if-shell "$is_vim" "send-keys M-\\" "select-pane -l"
